#!/usr/bin/python3"""Defines class and serializes it"""import pickleclass CustomObject:  """A custom class with attributes and methods for serialization."""  def __init__(self, name, age, is_student):    self.name = name    self.age = age    self.is_student = is_student  def display(self):    """Prints the object's attributes in a formatted way."""    print(f"Name: {self.name}")    print(f"Age: {self.age}")    print(f"Is Student: {self.is_student}")  def serialize(self, filename):    """Serializes the object and saves it to a file using pickle.    Args:      filename: The filename to save the serialized object.    """    try:      with open(filename, 'wb') as f:        pickle.dump(self, f)      print(f"Object serialized and saved to '{filename}'.")    except FileNotFoundError:      print(f"Error: File '{filename}' not found.")  @classmethod  def deserialize(cls, filename):    """Deserializes an object from a file using pickle.    Args:      filename: The filename containing the serialized object.    Returns:      A CustomObject instance or None if deserialization fails.    """    try:      with open(filename, 'rb') as f:        return pickle.load(f)    except (FileNotFoundError, pickle.UnpicklingError):      print(f"Error: Failed to deserialize object from '{filename}'.")      return None# Sample Testif __name__ == "__main__":  # Create an instance of CustomObject  obj = CustomObject(name="John", age=25, is_student=True)  print("Original Object:")  obj.display()  # Serialize the object  obj.serialize("object.pkl")  # Deserialize the object into a new instance  new_obj = CustomObject.deserialize("object.pkl")  print("\nDeserialized Object:")  if new_obj:    new_obj.display()